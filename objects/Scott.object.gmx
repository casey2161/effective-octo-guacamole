<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>scott_front_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.fire_rate = 10; //lower is better

self.cooldown = self.fire_rate;

self.max_energy = 100;
self.energy = self.max_energy;
self.walkdowncooldown = 4;
self.walkdown = self.walkdowncooldown;

self.recharge_time = 30; // 1 second, lower is better
self.reload = recharge_time;

self.dir = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    
    var lr, ud;
    
    var vel = 8;
    if (inv_get("boots") &gt;= 1) {
        vel = 16;
    }
    
    if (self.energy &gt; self.max_energy) {
        self.energy = self.max_energy;
    }
    
    lr = keyboard_check(ord('D')) - keyboard_check(ord('A')) 
    ud = keyboard_check(ord('S')) - keyboard_check(ord('W'));
    if ((lr != 0 || ud != 0) &amp;&amp; self.walkdown &lt; 0) {
        audio_play_sound(snd_walk, 2, 0);
        self.walkdown = self.walkdowncooldown;
    }
    var newx = x + lr * vel;
    var newy = y + ud * vel;
    
    if (place_free(newx, newy)) {
        x = newx;
        y = newy;
    }
    depth = -y;
    
    //room collision
    if (x &lt; 0 + sprite_width/2) {
        x = 0 + sprite_width/2;
    }
    if (y &lt; 0 + sprite_height / 2) {
        y = 0 + sprite_height / 2;
    }
    if (x &gt;= room_width - sprite_width/2 * image_xscale ) { //hacky fix for walking off screen
        x = room_width - sprite_width/2 * image_xscale;
    }
    if (y &gt; room_height - sprite_height/2) {
        y = room_height - sprite_height/2;
    }
    
    //face directions
    if (lr &gt; 0) {
        sprite_index = scott_walking_side;
        image_xscale = -1;
        self.dir = 2;
    } else if (lr &lt; 0) {
        sprite_index = scott_walking_side;
        image_xscale = 1;
        self.dir = 2;
    } else if (ud &gt; 0) {
        sprite_index = scott_walking_front;
        image_xscale = 1;
        self.dir = 1;
    } else if (ud &lt; 0) {
        sprite_index = scott_walking_back;
        image_xscale = 1;
        self.dir = 3;
    } else if (self.dir == 0) {
        sprite_index = scott_left_idle;
    } else if (self.dir == 1) {
        sprite_index = scott_front_idle;
    } else if (self.dir == 2) {
        sprite_index = scott_left_idle;
    } else if (self.dir = 3) {
        sprite_index = scott_back_idle;
    } else {
        sprite_index = scott_front_idle;
    }

    
    //bullet firing
    var dir, make_obj;
    make_obj = true;
    if (keyboard_check(vk_left)) {
        dir = 180;
        show_debug_message(string(self.energy));
    } else if (keyboard_check(vk_up)) {
        dir = 90;
    } else if (keyboard_check(vk_right)) {
        dir = 0;
    } else if (keyboard_check(vk_down)) {
        dir = 270;
    } else {
        make_obj = false;
    }

    if (make_obj &amp;&amp; self.cooldown &lt; 0 &amp;&amp; self.energy &gt;= 5) {
        self.cooldown = self.fire_rate;
        inst = instance_create(x, y, bullet);
        audio_play_sound(snd_shoot1, 1,0);
        self.energy -= 5;
        with (inst) {
            speed = 4;
            direction = dir;
            image_angle = dir;
        }
    }
    
    if (self.reload == 0) {
        self.energy += 1;
        self.reload = 30;
    }
    
    //timers
    self.reload -= 1;
    self.cooldown -= 1;
    self.walkdown -= 1; 
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>500</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>draw_self();</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_healthbar(view_xview[0]+10, view_yview[0]+10, view_xview[0]+110, view_yview[0]+10, self.energy / self.max_energy * 100, c_black, c_red, c_green, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
